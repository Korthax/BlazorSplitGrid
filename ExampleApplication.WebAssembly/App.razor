@using System.Globalization
@using DragEventArgs = BlazorSplitGrid.Models.DragEventArgs
@using BlazorSplitGrid.Models

<div style="width:100%; padding-bottom: 10px">
    <input @onclick="Reset" type="button" value="Reset" style="display: inline-block"/>
    <input @onclick="GetSizes" type="button" value="Get Sizes" style="display: inline-block"/>
    <input @onclick="SetSizes" type="button" value="Load Sizes" style="display: inline-block"/>
    <input @onclick="ToggleColumn" type="button" value="@(ColumnHidden ? "Show Column" : "Hide Column")"
           style="display: inline-block"/>
    <input @onclick="ToggleRow" type="button" value="@(RowHidden ? "Show Row" : "Hide Row")"
           style="display: inline-block"/>
    <input @onclick="FreezeGutter" type="button" value="@(ColumnDisabled ? "Enable Column 1" : "Disable Column 1")"
           style="display: inline-block"/>
</div>

<div style="height: 1000px; width:100%; padding-bottom: 10px">
    <SplitGrid @ref="SplitGrid" SnapOffset="0" DragInterval="1" MaxSize="850" OnDragStop="@OnDragStop"
               OnDragStart="@OnDragStart" OnColumnsResized="@(args => OnResized(Direction.Column, args))"
               OnRowsResized="@(args => OnResized(Direction.Row, args))"
               ResizeDebounceTime="@(TimeSpan.FromSeconds(0.5))">
        <SplitGridContent Style="background-color: red"></SplitGridContent>
        <SplitGridColumn @ref="ColumnGutter"/>
        <SplitGridContent Style="background-color: green"></SplitGridContent>
        <SplitGridColumn/>
        <SplitGridContent Style="background-color: blue"></SplitGridContent>
        <SplitGridRow/>
        <SplitGridContent Style="background-color: magenta"></SplitGridContent>
        <SplitGridContent Style="background-color: yellow"></SplitGridContent>
        <SplitGridContent Style="background-color: cyan"></SplitGridContent>
        <SplitGridRow/>
        <SplitGridContent Style="background-color: springgreen"></SplitGridContent>
        <SplitGridContent Style="background-color: purple"></SplitGridContent>
        <SplitGridContent Style="background-color: orange"></SplitGridContent>
    </SplitGrid>
</div>

<div style="width:100%; padding-bottom: 10px">
    <h3>Output:</h3>
    @foreach (var output in Output)
    {
        <p>@output</p>
    }
</div>

@code {
    private SplitGrid? SplitGrid { get; set; }
    private SplitGridColumn? ColumnGutter { get; set; }
    private Stack<string> Output { get; set; } = new();

    private bool ColumnDisabled => ColumnGutter?.Disabled ?? false;
    private bool ColumnHidden { get; set; }
    private bool RowHidden { get; set; }

    private string? _columnSizes;
    private string? _columnSize;

    private string? _rowSizes;
    private string? _rowSize;

    private Task OnDragStop(DragEventArgs eventArgs)
    {
        Console.WriteLine($"{nameof(OnDragStop)}: [{eventArgs.Direction}] {eventArgs.Track}");
        return Task.CompletedTask;
    }

    private Task OnDragStart(DragEventArgs eventArgs)
    {
        Console.WriteLine($"{nameof(OnDragStart)}: [{eventArgs.Direction}] {eventArgs.Track}");
        return Task.CompletedTask;
    }

    private async Task Reset()
    {
        if (SplitGrid is null)
            return;

        await SplitGrid.Reset();
        Output.Clear();
    }

    private async Task ToggleRow()
    {
        if (SplitGrid is null)
            return;

        if (RowHidden)
        {
            if (_rowSize is not null)
                await SplitGrid.SetSize(Direction.Row, 0, _rowSize);

            RowHidden = false;
        }
        else
        {
            _rowSize = await SplitGrid.SetSize(Direction.Row, 0, "0px");
            RowHidden = true;
        }
    }

    private async Task ToggleColumn()
    {
        if (SplitGrid is null)
            return;

        if (ColumnHidden)
        {
            if (_columnSize is not null)
                await SplitGrid.SetSize(Direction.Column, 0, _columnSize);

            ColumnHidden = false;
        }
        else
        {
            _columnSize = await SplitGrid.SetSize(Direction.Column, 0, "0px");
            ColumnHidden = true;
        }
    }

    private async Task FreezeGutter()
    {
        if (ColumnGutter is null)
            return;

        if (ColumnGutter.Disabled)
            await ColumnGutter.Enable();
        else
            await ColumnGutter.Disable();
    }

    private async Task GetSizes()
    {
        if (SplitGrid is null)
            return;

        _rowSizes = await SplitGrid.GetSizes(Direction.Row);
        _columnSizes = await SplitGrid.GetSizes(Direction.Column);

        Output.Push($"[{DateTime.Now.ToLongTimeString()}] {Direction.Row}: {_rowSizes}");
        Output.Push($"[{DateTime.Now.ToLongTimeString()}] {Direction.Column}: {_columnSizes}");
    }

    private async Task SetSizes()
    {
        if (SplitGrid is null)
            return;

        if (!string.IsNullOrWhiteSpace(_rowSizes))
            await SplitGrid.SetSizes(Direction.Row, _rowSizes);

        if (!string.IsNullOrWhiteSpace(_columnSizes))
            await SplitGrid.SetSizes(Direction.Column, _columnSizes);
    }

    private void OnResized(Direction direction, SizeEventArgs args) => Output.Push($"[{DateTime.Now.ToLongTimeString()}] {direction} resized: {args.SizeString}; {string.Join(", ", from sz in args.Sizes select sz.ToString(CultureInfo.InvariantCulture))}");
}
